import json
import time
import psycopg2
from kafka import KafkaConsumer


TOPIC_NAME = 'sugestoes-topic' # Nome do t√≥pico que vamos "ouvir"
GROUP_ID = 'grupo-sugestoes-arquivistas' # ID do grupo de consumidores para nossa "equipe de oper√°rios"
BOOTSTRAP_SERVERS = 'localhost:9092' # Endere√ßo do nosso servidor Kafka (agora acess√≠vel do seu PC)
DB_HOST = "localhost" # Usamos o nome localhost pois esse consumidor roda neste PC, n√£o em um cont√¢iner docker
DB_PORT = "5432"
DB_NAME = "sugestoes_db"
DB_USER = "dev"
DB_PASSWORD = "kafka"

print("‚û°Ô∏è  Iniciando Consumidor Kafka...")
print(f"   T√≥pico: {TOPIC_NAME}")
print(f"   Grupo de Consumidores: {GROUP_ID}")

# --- 1. Inciando Consumidor ---
consumer = None
for i in range(5):
    try:
        # Instanciamos o Consumidor
        consumer = KafkaConsumer(
            TOPIC_NAME,
            bootstrap_servers=BOOTSTRAP_SERVERS,
            group_id=GROUP_ID,
            auto_offset_reset='earliest', # Come√ßa a ler desde a mensagem mais antiga
            value_deserializer=lambda v: json.loads(v.decode('utf-8'))
        )
        print("‚úÖ Consumidor Kafka conectado com sucesso!")
        break
    except Exception as e:
        print(f"‚ùå Tentativa {i+1}/5 falhou. Erro ao conectar com o Kafka: {e}")
        time.sleep(5)


# --- 2. Conex√£o com o Banco de Dados ---
db_conn = None
if consumer: # S√≥ tenta conectar ao banco se o Kafka estiver ok
    try:
        # Usando a biblioteca psycopg2 para conectar ao nosso Postgres
        db_conn = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
        print("‚úÖ Conex√£o com o PostgreSQL estabelecida!")
    except Exception as e:
        print(f"‚ùå Erro ao conectar com o PostgreSQL: {e}")


# --- 3. Loop de Processamento ---

if not consumer or not db_conn:
    print("üö® Encerrando o consumidor por falha na conex√£o com Kafka ou PostgreSQL.")
else:
    print("\nüéß Ouvindo o t√≥pico em busca de novas sugest√µes para salvar no banco...")
    try:
        for message in consumer:
            sugestao_data = message.value
            
            print("\n----------------------------------------------------")
            print(f"üì¨ Nova sugest√£o recebida do Kafka: {sugestao_data}")

            try:
                # Criamos um "cursor", que √© o objeto que executa os comandos SQL
                cursor = db_conn.cursor()

                # Pega os dados do JSON. Usamos .get() para evitar erros se a chave n√£o existir.
                autor = sugestao_data.get('autor', 'An√¥nimo') # Define 'An√¥nimo' como padr√£o
                sugestao_texto = sugestao_data.get('sugestao')

                if sugestao_texto: # S√≥ insere se houver um texto de sugest√£o
                    # O comando SQL para inserir os dados na nossa tabela
                    sql = "INSERT INTO sugestoes (autor, sugestao) VALUES (%s, %s);"
                    
                    # Executando o comando de forma segura
                    # Passamos os valores como uma tupla para evitar SQL Injection
                    cursor.execute(sql, (autor, sugestao_texto))

                    # A transa√ß√£o no banco de dados precisa ser "commitada"
                    # para que a altera√ß√£o seja salva permanentemente.
                    db_conn.commit()
                    
                    print(f"üíæ Sugest√£o salva no banco de dados com sucesso!")
                
                # Fechamos o cursor ap√≥s o uso
                cursor.close()

            except Exception as e:
                print(f"üî• Erro ao salvar no banco de dados: {e}")
                # Em caso de erro, √© uma boa pr√°tica reverter a transa√ß√£o
                db_conn.rollback()
            # --- FIM DA NOVA L√ìGICA ---

    except KeyboardInterrupt:
        print("\n\nüîå Desligando o consumidor...")
    finally:
        # Garante que as conex√µes sejam fechadas ao encerrar.
        if consumer:
            consumer.close()
        if db_conn:
            db_conn.close()
            print("‚ùå Conex√£o com o PostgreSQL fechada.")
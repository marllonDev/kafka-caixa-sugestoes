# Arquivo: app.py

import json
from flask import Flask, request, jsonify
from kafka import KafkaProducer

# --- 1. Inicializa√ß√£o e Configura√ß√£o ---

# Cria a nossa aplica√ß√£o Flask. O '__name__' √© uma vari√°vel especial do Python
# que ajuda o Flask a saber onde encontrar outros arquivos, se precisarmos.
app = Flask(__name__)

# Configura√ß√£o do nosso Produtor Kafka.
# Ele tentar√° se conectar ao Kafka assim que a aplica√ß√£o iniciar.
try:
    # Criamos o objeto do Produtor.
    # - bootstrap_servers: Informa o endere√ßo do nosso broker Kafka. Como nossa API
    #   est√° rodando localmente (fora do Docker), nos conectamos via 'localhost:9092',
    #   a porta que expusemos no docker-compose.
    # - value_serializer: O Kafka envia mensagens como bytes. Esta fun√ß√£o lambda
    #   pega nosso dicion√°rio Python (JSON), o converte para uma string e depois
    #   para o formato de bytes UTF-8, que √© o que o Kafka espera.
    producer = KafkaProducer(
        bootstrap_servers='localhost:9092',
        value_serializer=lambda v: json.dumps(v).encode('utf-8')
    )
    print("‚úÖ Produtor Kafka conectado com sucesso!")
    
except Exception as e:
    # Se a conex√£o com o Kafka falhar ao iniciar, o programa avisar√° e n√£o continuar√°.
    # Isso √© importante para n√£o termos uma API rodando que n√£o consegue fazer seu trabalho.
    print(f"‚ùå Erro ao conectar com o Kafka: {e}")
    producer = None

# --- 2. Defini√ß√£o do Endpoint da API ---

# Aqui definimos a nossa "rota" ou "endpoint".
# - '/sugestao': √â o endere√ßo (ex: http://localhost:5000/sugestao).
# - methods=['POST']: Especifica que este endpoint s√≥ aceita requisi√ß√µes do tipo POST.
@app.route('/sugestao', methods=['POST'])
def enviar_sugestao():
    """
    Recebe uma sugest√£o em formato JSON e a envia para o t√≥pico Kafka.
    """
    # Primeiro, verificamos se o nosso produtor Kafka est√° conectado.
    if not producer:
        # Se n√£o estiver, retornamos um erro 503 (Servi√ßo Indispon√≠vel).
        return jsonify({"status": "erro", "mensagem": "Servi√ßo de sugest√µes indispon√≠vel"}), 503

    # Pega os dados JSON enviados no corpo da requisi√ß√£o POST.
    # O 'force=True' ajuda a evitar erros se o cabe√ßalho 'Content-Type' n√£o for 'application/json'.
    dados_sugestao = request.get_json(force=True)

    # Verifica√ß√£o simples para garantir que recebemos um JSON v√°lido e com a chave 'sugestao'.
    if not dados_sugestao or 'sugestao' not in dados_sugestao:
        # Se os dados forem inv√°lidos, retornamos um erro 400 (Bad Request).
        return jsonify({"status": "erro", "mensagem": "JSON inv√°lido. 'sugestao' √© um campo obrigat√≥rio."}), 400

    # O nome do t√≥pico para onde enviaremos a mensagem.
    # √â o mesmo que definimos em nossa arquitetura.
    topic_name = 'sugestoes-topic'

    try:
        # AQUI A M√ÅGICA ACONTECE!
        # Usamos o m√©todo 'send' do produtor para enviar a mensagem.
        # - 1¬∫ argumento: O nome do t√≥pico.
        # - value: O conte√∫do da mensagem (nosso dicion√°rio/JSON).
        print(f"üì® Enviando sugest√£o para o t√≥pico '{topic_name}': {dados_sugestao}")
        producer.send(topic_name, value=dados_sugestao)
        
        # O Kafka Producer funciona de forma ass√≠ncrona. As mensagens s√£o colocadas
        # em um buffer e enviadas em background. 'flush()' for√ßa o envio
        # imediato de todas as mensagens pendentes no buffer.
        producer.flush()

        print("üëç Mensagem enviada com sucesso!")
        
        # Retornamos uma resposta de sucesso para quem chamou a API.
        return jsonify({"status": "sucesso", "mensagem": "Sugest√£o recebida e enviada para processamento!"})

    except Exception as e:
        # Se algo der errado durante o envio, capturamos o erro.
        print(f"üî• Erro ao enviar mensagem para o Kafka: {e}")
        # E retornamos uma mensagem de erro gen√©rica para o cliente.
        return jsonify({"status": "erro", "mensagem": "Ocorreu um erro interno ao processar a sugest√£o."}), 500

# --- 3. Execu√ß√£o da Aplica√ß√£o ---

# Este bloco s√≥ √© executado quando rodamos o script diretamente (python app.py).
# Ele n√£o √© executado se o arquivo for importado por outro.
if __name__ == '__main__':
    # Inicia o servidor de desenvolvimento do Flask.
    # - host='0.0.0.0': Faz o servidor ser acess√≠vel por qualquer IP da m√°quina, n√£o s√≥ localhost.
    # - port=5000: Define a porta em que a API vai rodar.
    # - debug=True: Ativa o modo de depura√ß√£o, que reinicia o servidor automaticamente
    #   a cada altera√ß√£o no c√≥digo e mostra erros detalhados no navegador. √ìtimo para desenvolver.
    app.run(host='0.0.0.0', port=5000, debug=True)
import psycopg2
from . import config  # Importa as nossas configura√ß√µes centralizadas

# --- Vari√°vel Global para a Conex√£o ---
# Assim como fizemos com o produtor, criaremos uma √∫nica conex√£o com o banco
# que ser√° compartilhada, o que √© muito mais eficiente.
db_connection = None

# --- Fun√ß√£o de Inicializa√ß√£o ---
def initialize_database() -> None:
    """
    Inicializa a conex√£o com o banco de dados PostgreSQL.
    Esta fun√ß√£o ser√° chamada uma vez quando o consumidor iniciar.
    """
    global db_connection
    
    try:
        # Usamos os dados do nosso arquivo config para estabelecer a conex√£o.
        db_connection = psycopg2.connect(
            host=config.DB_HOST,
            port=config.DB_PORT,
            dbname=config.DB_NAME,
            user=config.DB_USER,
            password=config.DB_PASSWORD
        )
        print("‚úÖ Conex√£o com o PostgreSQL inicializada com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao inicializar a conex√£o com o PostgreSQL: {e}")
        db_connection = None

# --- Fun√ß√£o para Salvar a Sugest√£o ---
def save_sugestao(sugestao_data) -> bool:
    """
    Recebe um dicion√°rio com os dados da sugest√£o e o salva no banco.

    Args:
        sugestao_data (dict): Dicion√°rio contendo a sugest√£o.
    
    Returns:
        bool: True se a opera√ß√£o foi bem-sucedida, False em caso de erro.
    """
    # Verifica se a conex√£o com o banco foi estabelecida.
    if not db_connection:
        print("üö® Conex√£o com o banco de dados n√£o est√° dispon√≠vel.")
        return False

    # Pega os dados do dicion√°rio, definindo 'An√¥nimo' como padr√£o se o autor n√£o existir.
    autor = sugestao_data.get('autor', 'An√¥nimo')
    sugestao_texto = sugestao_data.get('sugestao')

    # S√≥ tenta inserir se o texto da sugest√£o n√£o for vazio.
    if not sugestao_texto:
        print("‚ö†Ô∏è Sugest√£o vazia recebida. Nenhum dado foi salvo.")
        return False

    try:
        # Cria um 'cursor' para executar os comandos SQL.
        # O 'with' garante que o cursor ser√° fechado automaticamente.
        with db_connection.cursor() as cursor:
            sql = "INSERT INTO sugestoes (autor, sugestao) VALUES (%s, %s);"
            cursor.execute(sql, (autor, sugestao_texto))
        
        # Confirma a transa√ß√£o para salvar os dados permanentemente.
        db_connection.commit()
        print(f"üíæ Sugest√£o de '{autor}' salva no banco de dados com sucesso!")
        return True
    except Exception as e:
        print(f"üî• Erro ao salvar no banco de dados: {e}")
        # Se ocorrer um erro, reverte a transa√ß√£o para n√£o deixar o banco
        # em um estado inconsistente.
        db_connection.rollback()
        return False

# --- Fun√ß√£o para Fechar a Conex√£o ---
def close_database() -> None:
    """Fecha a conex√£o com o banco de dados, se ela estiver aberta."""
    if db_connection:
        db_connection.close()
        print("‚ùå Conex√£o com o PostgreSQL fechada.")
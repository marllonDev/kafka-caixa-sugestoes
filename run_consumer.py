# Importamos as fun√ß√µes que precisamos de dentro do nosso pacote 'app'
from app.consumer import initialize_consumer, start_consuming
from app.database import initialize_database, close_database

# O ponto de entrada principal para rodar nosso consumidor.
if __name__ == '__main__':
    print("‚ñ∂Ô∏è  Iniciando o servi√ßo do Consumidor de Sugest√µes...")
    
    # PASSO 1: Inicializa as conex√µes com os servi√ßos externos.
    # Primeiro com o banco de dados, depois com o Kafka.
    db_ok: bool= initialize_database()
     # Adicionamos este print para ver o resultado da conex√£o com o banco
    print(f"--> Status da conex√£o com o Banco de Dados (db_ok): {db_ok}")

    consumer_ok: bool = initialize_consumer()
    # Adicionamos este print para ver o resultado da conex√£o com o Kafka
    print(f"--> Status da conex√£o com o Kafka (consumer_ok): {consumer_ok}")

    # PASSO 2: S√≥ inicia o processo se ambas as conex√µes foram bem-sucedidas.
    if db_ok and consumer_ok:
        try:
            # Chama a fun√ß√£o que cont√©m o loop infinito de 'escuta' do Kafka.
            start_consuming()
        finally:
            # O bloco 'finally' √© uma garantia. Ele SEMPRE ser√° executado
            # ao sair do bloco 'try', n√£o importa o motivo (seja por um erro
            # ou por voc√™ pressionar Ctrl+C no terminal).
            # √â o local perfeito para garantir que recursos importantes, como
            # a conex√£o com o banco, sejam sempre liberados.
            print("\nEncerrando o servi√ßo do consumidor.")
            close_database()
    else:
        print("üö® N√£o foi poss√≠vel inicializar os servi√ßos necess√°rios. Encerrando.")
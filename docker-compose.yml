# =================================================================
#  ARQUIVO DOCKER-COMPOSE PARA O PROJETO "CAIXA DE SUGESTÕES"
# =================================================================
# A seção 'services' é onde definimos todos os "aplicativos" ou "peças"
# que nosso projeto precisa para funcionar em conjunto.
services:

  # --- SERVIÇO DO KAFKA ---
  # Esta é a definição do nosso servidor Kafka.
  kafka:
    # A "planta" ou "molde" do nosso contêiner. Estamos usando a imagem da Bitnami,
    # versão 3.7, que é a nossa escolha mais estável e direta.
    image: bitnami/kafka:3.7
    # Um nome simples e legível para o nosso contêiner, para fácil identificação.
    container_name: kafka
    # A seção 'ports' define as "janelas" do contêiner para o mundo exterior (seu computador).
    ports:
      # Mapeia a porta 9092 do seu computador para a porta 9092 do contêiner.
      # É através dela que nossa API Python irá se comunicar com o Kafka.
      # Formato: "PORTA_NO_SEU_PC:PORTA_NO_CONTAINER"
      - "9092:9092"
    # A seção 'environment' é o "painel de controle" do Kafka. Aqui passamos as
    # instruções de como ele deve se configurar e se comportar ao iniciar.
    environment:
      # --- Configuração para KRaft (modo sem Zookeeper) ---
      # O prefixo 'KAFKA_CFG_' é um padrão da imagem da Bitnami.

      # Em modo KRaft, cada nó (servidor) do Kafka precisa de um ID único.
      # Como só temos um, o chamamos de '0'.
      - KAFKA_CFG_NODE_ID=0
      # Dizemos para esta instância do Kafka que ela deve atuar em dois papéis:
      # 'controller' (o "chefe" que gerencia o cluster) e 'broker' (o "operário"
      # que armazena e entrega as mensagens). Perfeito para um ambiente de desenvolvimento.
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # Define um nome para o canal de comunicação interno que o 'controller' usa.
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # Define todos os "ouvidos" do nosso Kafka.
      # - 'PLAINTEXT://:9092': O ouvido principal para aplicações (nosso Python).
      # - 'CONTROLLER://:9093': O ouvido privado para as tarefas de gerenciamento do 'controller'.
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      # Este é o "endereço público" que o Kafka informa aos seus clientes.
      # Ele diz: "Se você estiver fora da rede Docker (como nossa API rodando localmente),
      # conecte-se a mim através do 'localhost' na porta 9092".
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      # Define quem são os nós que podem votar para eleger o líder do cluster.
      # Como só temos o nó '0', ele vota em si mesmo no endereço 'kafka:9093'.
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Uma conveniência para o desenvolvimento. Permite que um tópico seja criado
      # automaticamente se um produtor tentar enviar uma mensagem para ele e ele não existir.
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

  # --- SERVIÇO DO POSTGRES ---
  # A definição do nosso banco de dados.
  postgres:
    # A planta do nosso banco de dados, usando a imagem oficial do PostgreSQL na versão 17.
    image: postgres:17
    # Nome amigável para o contêiner do banco.
    container_name: postgres
    # Expõe a porta padrão do Postgres (5432) para que possamos nos conectar a ele
    # com ferramentas de banco de dados, se precisarmos.
    ports:
      - "5432:5432"
    # Configurações iniciais que o Postgres usará na primeira vez que for criado.
    environment:
      # Cria um usuário padrão chamado 'dev'.
      POSTGRES_USER: dev
      # Define a senha para este usuário.
      POSTGRES_PASSWORD: kafka
      # Cria um banco de dados inicial com este nome.
      POSTGRES_DB: sugestoes_db
    # A seção 'volumes' define o "disco rígido" persistente do nosso banco de dados.
    volumes:
      # Conecta a pasta interna do contêiner onde os dados são salvos
      # a uma área de armazenamento gerenciada pelo Docker chamada 'postgres_data'.
      # Isso garante que nossos dados não sejam perdidos se o contêiner for desligado.
      - postgres_data:/var/lib/postgresql/data

# A seção 'volumes' no nível principal do arquivo declara formalmente as áreas
# de armazenamento que nossos serviços podem usar.
volumes:
  # Declara a área de armazenamento 'postgres_data'.
  postgres_data:
# =================================================================
#  ARQUIVO DOCKER-COMPOSE PARA O PROJETO "CAIXA DE SUGESTÕES"
# =================================================================
# Versão da especificação do Docker Compose. '3.8' é uma versão
# moderna e estável que suporta todos os recursos que precisamos.
version: '3.8'

# A seção 'services' é onde definimos todos os "contêineres" ou
# "serviços" que nossa aplicação precisa para rodar.
# No nosso caso, o Kafka e o PostgreSQL.
services:

  # -------------------
  # SERVIÇO DO KAFKA
  # -------------------
  # Usaremos uma única instância do Kafka rodando no modo KRaft.
  # KRaft é o novo padrão do Kafka que NÃO precisa mais do Zookeeper
  # para gerenciar o estado do cluster. Isso torna nosso ambiente
  # mais simples, leve e moderno.
  kafka:
    # A imagem Docker que vamos usar. 'confluentinc/cp-kafka' é uma
    # imagem popular e bem mantida pela Confluent. Usaremos a versão 7.7.0,
    # que é a mais estável e recente em 2025.
    image: confluentinc/cp-kafka:7.7.0
    # O nome do contêiner para fácil identificação.
    container_name: kafka
    # Mapeamento de portas. Essencial para que possamos nos conectar
    # ao Kafka de fora do ambiente Docker (da nossa máquina local).
    # - A porta 9092 é a porta padrão que os clientes Kafka (nosso Python) usam.
    # - A porta 29092 será uma porta "interna" que o próprio Kafka usará.
    ports:
      - "9092:9092"
      - "29092:29092"
    # A seção 'environment' é crucial. Aqui configuramos o Kafka.
    environment:
      # CONFIGURAÇÃO DO LISTENER: Como o Kafka "ouve" o mundo.
      # Esta é a parte mais crítica e onde muitos erros acontecem.
      # KAFKA_LISTENERS: Define as portas que o Kafka vai usar para escutar.
      #   - LISTENER_DOCKER_INTERNAL: para comunicação DENTRO da rede Docker.
      #   - LISTENER_DOCKER_EXTERNAL: para comunicação de FORA da rede Docker.
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:29092,LISTENER_DOCKER_EXTERNAL://kafka:9092
      # KAFKA_ADVERTISED_LISTENERS: Como os clientes devem se conectar.
      #   - Para clientes DENTRO da rede Docker (outro contêiner), eles devem usar 'kafka:29092'.
      #   - Para clientes FORA (nossa máquina), eles devem usar 'localhost:9092'.
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:29092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: Define o protocolo de segurança para cada listener.
      #   'PLAINTEXT' significa sem criptografia, o que é ok para desenvolvimento local.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      # KAFKA_INTER_BROKER_LISTENER_NAME: Qual listener os brokers devem usar para se comunicar entre si.
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL

      # CONFIGURAÇÃO DO KRAFT (O SUBSTITUTO DO ZOOKEEPER)
      # KAFKA_PROCESS_ROLES: Define os papéis deste nó Kafka. 'broker,controller' significa
      #   que ele será um "nó combinado", atuando como "chefe" e "operário" ao mesmo tempo.
      #   Perfeito para um ambiente simples.
      KAFKA_PROCESS_ROLES: 'broker,controller'
      # KAFKA_NODE_ID: Um identificador único para este nó no cluster.
      KAFKA_NODE_ID: 1
      # KAFKA_CONTROLLER_QUORUM_VOTERS: Informa quem são os nós que podem votar para eleger o "chefe".
      #   Como só temos um nó, ele vota em si mesmo.
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      # KAFKA_CONTROLLER_LISTENER_NAMES: Informa qual listener os controllers usam.
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      
      # CONFIGURAÇÕES GERAIS DO BROKER
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: Fator de replicação para o tópico interno
      #   que guarda os offsets dos consumidores. '1' porque só temos um broker.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: Um pequeno delay para dar tempo dos
      #   consumidores entrarem no grupo antes do Kafka rebalancear as partições.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: Para facilitar, permitimos que os tópicos sejam
      #   criados automaticamente quando um produtor tenta enviar uma mensagem para um
      #   tópico que ainda não existe. Ótimo para desenvolvimento.
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  # -------------------
  # SERVIÇO DO POSTGRES
  # -------------------
  # Nosso "arquivo de aço", o banco de dados para guardar as sugestões.
  postgres:
    # Usando a imagem oficial do PostgreSQL, na versão 17, a mais recente e estável.
    image: postgres:17
    container_name: postgres
    # Mapeamento de porta para que possamos nos conectar ao banco
    # usando uma ferramenta de banco de dados (DBeaver, DataGrip, etc).
    # A porta padrão do Postgres é a 5432.
    ports:
      - "5432:5432"
    # Variáveis de ambiente para configurar o usuário, senha e nome do banco
    # que será criado quando o contêiner iniciar pela primeira vez.
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: kafka
      POSTGRES_DB: sugestoes_db
    # A seção 'volumes' garante que os dados do nosso banco de dados
    # sejam persistidos no nosso computador local. Se o contêiner for
    # removido, os dados não serão perdidos.
    volumes:
      - postgres_data:/var/lib/postgresql/data

# A seção 'volumes' no nível raiz declara o volume que usamos acima.
# Isso permite que o Docker gerencie o armazenamento para nós.
volumes:
  postgres_data: